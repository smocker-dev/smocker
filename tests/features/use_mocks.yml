name: Use mocks to respond
version: "2"
testcases:
  - name: Don't register mocks
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 666

  - name: Use basic mock
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/mocks?reset=true
        bodyFile: ../data/basic_mock.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"

      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test

  - name: Use basic mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/mocks?reset=true
        bodyFile: ../data/basic_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"

      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test

      - type: http
        method: GET
        url: http://localhost:8080/encoded%2Fpath
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "encoded path"

      - type: http
        method: POST
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test2

      - type: http
        method: DELETE
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test3

      - type: http
        method: GET
        url: http://localhost:8080/test?foo=bar&foo=baz
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test4

      - type: http
        method: GET
        url: http://localhost:8080/test
        headers:
          X-Custom-Header: bar
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test5

  - name: Use matcher mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/mocks?reset=true
        bodyFile: ../data/matcher_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"

      - type: http
        method: GET
        url: http://localhost:8080/any
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test

      - type: http
        method: POST
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test2

      - type: http
        method: DELETE
        url: http://localhost:8080/test
        body: >
          {"id": 1}
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test3

      - type: http
        method: PUT
        url: http://localhost:8080/test
        headers:
          Content-Type: application/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test4

      - type: http
        method: PATCH
        url: http://localhost:8080/test?test=true&test2=test3
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test5

      - type: http
        method: GET
        url: http://localhost:8080/test6
        body: "notEmpty"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test7

      - type: http
        method: GET
        url: http://localhost:8080/test8?test=trueeeeee
        body: "notEmpty"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test9

      - type: http
        method: POST
        url: http://localhost:8080/test10
        body: >
          { "key1": "test" }

        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test11
      - type: http
        method: POST
        url: http://localhost:8080/test10
        body: >
          { "key1": "test2" }
        assertions:
          - result.statuscode ShouldEqual 666

      - type: http
        method: POST
        url: http://localhost:8080/test12
        headers:
          Content-Type: application/x-www-form-urlencoded
        body: key1=test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test13
      - type: http
        method: POST
        url: http://localhost:8080/test12
        headers:
          Content-Type: application/x-www-form-urlencoded
        body: key1=test2
        assertions:
          - result.statuscode ShouldEqual 666

      - type: http
        method: POST
        url: http://localhost:8080/test14
        body: '{"id": 2}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test15
      - type: http
        method: POST
        url: http://localhost:8080/test14
        body: '{"id": 1}'
        assertions:
          - result.statuscode ShouldEqual 666
      - type: http
        method: POST
        url: http://localhost:8080/test14
        body: <test>test</test> # The ShouldNotEqualJSON matcher should not work with invalid JSON
        assertions:
          - result.statuscode ShouldEqual 666

      - type: http
        method: POST
        url: http://localhost:8080/test16
        body: '[{"messages": ["message1", "message2"]}, {"messages": ["message3", "message4"]}]'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test17
      - type: http
        method: POST
        url: http://localhost:8080/test16
        body: '[{"messages": ["message4", "message3"]}, {"messages": ["message2", "message1"]}]'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test17
      - type: http
        method: POST
        url: http://localhost:8080/test16
        body: '{"id": 1}'
        assertions:
          - result.statuscode ShouldEqual 666

      - type: http
        method: POST
        url: http://localhost:8080/test18
        body: '{"id": 1}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test19
      - type: http
        method: POST
        url: http://localhost:8080/test18
        body: '[{"messages": ["message1", "message2"]}, {"messages": ["message3", "message4"]}]'
        assertions:
          - result.statuscode ShouldEqual 666
      - type: http
        method: POST
        url: http://localhost:8080/test18
        body: '[{"messages": ["message4", "message3"]}, {"messages": ["message2", "message1"]}]'
        assertions:
          - result.statuscode ShouldEqual 666
      - type: http
        method: POST
        url: http://localhost:8080/test18
        body: <test>test</test> # The ShouldNotEqualUnorderedJSON matcher should not work with invalid JSON
        assertions:
          - result.statuscode ShouldEqual 666

  - name: Use dynamic mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/mocks?reset=true
        bodyFile: ../data/dynamic_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"

      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test"

      - type: http
        method: GET
        url: http://localhost:8080/test2?name=test2
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test2"
          - result.bodyjson.name ShouldEqual test2

      - type: http
        method: GET
        url: http://localhost:8080/test3
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test3"

      - type: http
        method: GET
        url: http://localhost:8080/test4
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test4"

      - type: http
        method: GET
        url: http://localhost:8080/test5
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test5"

      - type: http
        method: GET
        url: http://localhost:8080/test6
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test6"

  - name: Use proxy mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/mocks?reset=true
        bodyFile: ../data/proxy_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"

      - type: http
        method: GET
        url: http://localhost:8080/posts/1
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldEqual 1
          - result.bodyjson.body ShouldNotBeBlank
          - result.bodyjson.title ShouldNotBeBlank

      - type: http
        method: GET
        url: http://localhost:8080/todos?userId=1
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.__len__ ShouldEqual 20

      # - type: http
      #   method: GET
      #   url: http://localhost:8080/redirect-to?url=https%3A%2F%2Fsmocker.dev%2F&status_code=302
      #   no_follow_redirect: true
      #   assertions:
      #     - result.statuscode ShouldEqual 302
      #     - result.headers.location ShouldEqual https://smocker.dev/
      # - type: http
      #   method: GET
      #   url: http://localhost:8080/redirect-to?url=https%3A%2F%2Fhttpbin.org%2Fget&status_code=302
      #   headers:
      #     X-Follow-Redirect: "true"
      #     User-Agent: "foobar"
      #   no_follow_redirect: true
      #   assertions:
      #     - result.statuscode ShouldEqual 200
      #     - result.bodyjson.url ShouldEqual https://httpbin.org/get

      - type: http
        method: GET
        url: http://localhost:8080/get
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.headers.host ShouldEqual httpbin.org

      - type: http
        method: GET
        url: http://localhost:8080/get
        headers:
          X-Keep-Host: "true"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.headers.host ShouldEqual localhost

      - type: http
        method: GET
        url: http://localhost:8080/headers
        no_follow_redirect: true
        headers:
          CuStOm: ShouldBeOverwritten
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.headers.custom ShouldEqual foobar
          - result.bodyjson.headers.multi ShouldEqual foo,baz

      - type: http
        method: GET
        url: http://localhost:8080/
        headers:
          X-Filter: badssl
          X-Value: insecure
        assertions:
          - result.statuscode ShouldEqual 200

      - type: http
        method: GET
        url: http://localhost:8080/
        headers:
          X-Filter: badssl
          X-Value: secure
        assertions:
          - result.statuscode ShouldEqual 602
